// <auto-generated />
using System;
using MicroLine.Services.Airline.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroLine.Services.Airline.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AirlineDbContext))]
    [Migration("20221115134613_ChangeManytoManyRelationshipTypeInFlightConf")]
    partial class ChangeManytoManyRelationshipTypeInFlightConf
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CabinCrewFlight", b =>
                {
                    b.Property<Guid>("CabinCrewMembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CabinCrewMembersId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("CabinCrewFlight");
                });

            modelBuilder.Entity("FlightFlightCrew", b =>
                {
                    b.Property<Guid>("FlightCrewMembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FlightCrewMembersId", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightFlightCrew");
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.Aircrafts.Aircraft", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CruisingSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("date");

                    b.Property<int>("Manufacturer")
                        .HasColumnType("int");

                    b.Property<string>("MaximumOperatingSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.Airports.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("IcaoCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.CabinCrews.CabinCrew", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CabinCrewType")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("CabinCrews");
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.FlightCrews.FlightCrew", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FlightCrewType")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("FlightCrews");
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.Flights.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AircraftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DestinationAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EstimatedFlightDuration")
                        .HasColumnType("time");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OriginAirportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ScheduledUtcDateTimeOfArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledUtcDateTimeOfDeparture")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("OriginAirportId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("CabinCrewFlight", b =>
                {
                    b.HasOne("MicroLine.Services.Airline.Domain.CabinCrews.CabinCrew", null)
                        .WithMany()
                        .HasForeignKey("CabinCrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroLine.Services.Airline.Domain.Flights.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightFlightCrew", b =>
                {
                    b.HasOne("MicroLine.Services.Airline.Domain.FlightCrews.FlightCrew", null)
                        .WithMany()
                        .HasForeignKey("FlightCrewMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroLine.Services.Airline.Domain.Flights.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.Aircrafts.Aircraft", b =>
                {
                    b.OwnsOne("MicroLine.Services.Airline.Domain.Aircrafts.PassengerSeatingCapacity", "PassengerSeatingCapacity", b1 =>
                        {
                            b1.Property<Guid>("AircraftId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("BusinessClassCapacity")
                                .HasColumnType("int");

                            b1.Property<int>("EconomyClassCapacity")
                                .HasColumnType("int");

                            b1.Property<int>("FirstClassCapacity")
                                .HasColumnType("int");

                            b1.HasKey("AircraftId");

                            b1.ToTable("Aircrafts");

                            b1.WithOwner()
                                .HasForeignKey("AircraftId");
                        });

                    b.Navigation("PassengerSeatingCapacity")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.Airports.Airport", b =>
                {
                    b.OwnsOne("MicroLine.Services.Airline.Domain.Airports.AirportLocation", "AirportLocation", b1 =>
                        {
                            b1.Property<Guid>("AirportId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Continent")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AirportId");

                            b1.ToTable("Airports");

                            b1.WithOwner()
                                .HasForeignKey("AirportId");
                        });

                    b.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.BaseUtcOffset", "BaseUtcOffset", b1 =>
                        {
                            b1.Property<Guid>("AirportId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Hours")
                                .HasColumnType("int");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int");

                            b1.HasKey("AirportId");

                            b1.ToTable("Airports");

                            b1.WithOwner()
                                .HasForeignKey("AirportId");
                        });

                    b.Navigation("AirportLocation")
                        .IsRequired();

                    b.Navigation("BaseUtcOffset")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.CabinCrews.CabinCrew", b =>
                {
                    b.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CabinCrewId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("CabinCrewId");

                            b1.ToTable("CabinCrews");

                            b1.WithOwner()
                                .HasForeignKey("CabinCrewId");
                        });

                    b.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("CabinCrewId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("CabinCrewId");

                            b1.ToTable("CabinCrews");

                            b1.WithOwner()
                                .HasForeignKey("CabinCrewId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.FlightCrews.FlightCrew", b =>
                {
                    b.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("FlightCrewId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("FlightCrewId");

                            b1.ToTable("FlightCrews");

                            b1.WithOwner()
                                .HasForeignKey("FlightCrewId");
                        });

                    b.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("FlightCrewId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("FlightCrewId");

                            b1.ToTable("FlightCrews");

                            b1.WithOwner()
                                .HasForeignKey("FlightCrewId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroLine.Services.Airline.Domain.Flights.Flight", b =>
                {
                    b.HasOne("MicroLine.Services.Airline.Domain.Aircrafts.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MicroLine.Services.Airline.Domain.Airports.Airport", "DestinationAirport")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MicroLine.Services.Airline.Domain.Airports.Airport", "OriginAirport")
                        .WithMany()
                        .HasForeignKey("OriginAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("MicroLine.Services.Airline.Domain.Flights.FlightPrice", "Prices", b1 =>
                        {
                            b1.Property<Guid>("FlightId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flights");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");

                            b1.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.Money", "BusinessClass", b2 =>
                                {
                                    b2.Property<Guid>("FlightPriceFlightId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(11, 6)
                                        .HasColumnType("decimal(11,6)");

                                    b2.Property<int>("Currency")
                                        .HasColumnType("int");

                                    b2.HasKey("FlightPriceFlightId");

                                    b2.ToTable("Flights");

                                    b2.WithOwner()
                                        .HasForeignKey("FlightPriceFlightId");
                                });

                            b1.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.Money", "EconomyClass", b2 =>
                                {
                                    b2.Property<Guid>("FlightPriceFlightId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(11, 6)
                                        .HasColumnType("decimal(11,6)");

                                    b2.Property<int>("Currency")
                                        .HasColumnType("int");

                                    b2.HasKey("FlightPriceFlightId");

                                    b2.ToTable("Flights");

                                    b2.WithOwner()
                                        .HasForeignKey("FlightPriceFlightId");
                                });

                            b1.OwnsOne("MicroLine.Services.Airline.Domain.Common.ValueObjects.Money", "FirstClass", b2 =>
                                {
                                    b2.Property<Guid>("FlightPriceFlightId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(11, 6)
                                        .HasColumnType("decimal(11,6)");

                                    b2.Property<int>("Currency")
                                        .HasColumnType("int");

                                    b2.HasKey("FlightPriceFlightId");

                                    b2.ToTable("Flights");

                                    b2.WithOwner()
                                        .HasForeignKey("FlightPriceFlightId");
                                });

                            b1.Navigation("BusinessClass")
                                .IsRequired();

                            b1.Navigation("EconomyClass")
                                .IsRequired();

                            b1.Navigation("FirstClass")
                                .IsRequired();
                        });

                    b.Navigation("Aircraft");

                    b.Navigation("DestinationAirport");

                    b.Navigation("OriginAirport");

                    b.Navigation("Prices")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
